/**
 * api.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface ApiAddTalkRequest {
    "userId"?: string;
}

export interface ApiAddTalkResponse {
    "talk"?: ApiTalk;
}

export interface ApiAddUserRequest {
    "name"?: string;
}

export interface ApiAddUserResponse {
    /**
     * The newly added user.
     */
    "user"?: ApiUser;
}

export interface ApiFetchAllResponse {
    "user"?: Array<ApiUser>;
    "talk"?: Array<ApiTalk>;
}

export interface ApiTalk {
    "id"?: string;
    "name"?: string;
    "speakerId"?: string;
    "done"?: boolean;
    "url"?: Array<string>;
}

export interface ApiUser {
    "id"?: string;
    "name"?: string;
}



/**
 * ApiServiceApi - fetch parameter creator
 */
export const ApiServiceApiFetchParamCreator = {
    /**
     * 
     * @param body 
     */
    addTalk(params: {  "body": ApiAddTalkRequest; }, options?: any): FetchArgs {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addTalk");
        }
        const baseUrl = `/v1/talk`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param body 
     */
    addUser(params: {  "body": ApiAddUserRequest; }, options?: any): FetchArgs {
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling addUser");
        }
        const baseUrl = `/v1/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    fetchAll(options?: any): FetchArgs {
        const baseUrl = `/v1/fetch-all`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * ApiServiceApi - functional programming interface
 */
export const ApiServiceApiFp = {
    /**
     * 
     * @param body 
     */
    addTalk(params: { "body": ApiAddTalkRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiAddTalkResponse> {
        const fetchArgs = ApiServiceApiFetchParamCreator.addTalk(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param body 
     */
    addUser(params: { "body": ApiAddUserRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiAddUserResponse> {
        const fetchArgs = ApiServiceApiFetchParamCreator.addUser(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    fetchAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApiFetchAllResponse> {
        const fetchArgs = ApiServiceApiFetchParamCreator.fetchAll(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ApiServiceApi - object-oriented interface
 */
export class ApiServiceApi extends BaseAPI {
    /**
     * 
     * @param body 
     */
    addTalk(params: {  "body": ApiAddTalkRequest; }, options?: any) {
        return ApiServiceApiFp.addTalk(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param body 
     */
    addUser(params: {  "body": ApiAddUserRequest; }, options?: any) {
        return ApiServiceApiFp.addUser(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    fetchAll(options?: any) {
        return ApiServiceApiFp.fetchAll(options)(this.fetch, this.basePath);
    }
};

/**
 * ApiServiceApi - factory interface
 */
export const ApiServiceApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param body 
         */
        addTalk(params: {  "body": ApiAddTalkRequest; }, options?: any) {
            return ApiServiceApiFp.addTalk(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param body 
         */
        addUser(params: {  "body": ApiAddUserRequest; }, options?: any) {
            return ApiServiceApiFp.addUser(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        fetchAll(options?: any) {
            return ApiServiceApiFp.fetchAll(options)(fetch, basePath);
        },
    };
};

